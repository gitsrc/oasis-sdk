use std::convert::TryInto;

use anyhow::{anyhow, Context as _};
use ethereum::{self, EnvelopedDecodable};
use k256::elliptic_curve::scalar::IsHigh;

use oasis_runtime_sdk::{
    crypto::signature,
    types::{address, token, transaction},
};

use crate::types;

pub fn recover_low(
    sig: &k256::ecdsa::Signature,
    sig_recid: k256::ecdsa::RecoveryId,
    sig_hash: &primitive_types::H256,
) -> Result<k256::ecdsa::VerifyingKey, anyhow::Error> {
    if sig.s().is_high().into() {
        return Err(anyhow!("signature s high"));
    }
    k256::ecdsa::VerifyingKey::recover_from_prehash(
        sig_hash.as_fixed_bytes().as_ref(),
        sig,
        sig_recid,
    )
    .with_context(|| "recover verify key from digest")
}

pub fn decode(
    body: &[u8],
    expected_chain_id: Option<u64>,
) -> Result<transaction::Transaction, anyhow::Error> {
    let (
        chain_id,
        sig,
        sig_recid,
        sig_hash,
        eth_action,
        eth_value,
        eth_input,
        eth_nonce,
        eth_gas_price,
        eth_gas_limit,
    ) = match ethereum::TransactionV2::decode(body)
        .map_err(|_| anyhow!("decoding transaction rlp"))?
    {
        ethereum::TransactionV2::Legacy(eth_tx) => {
            let sig = k256::ecdsa::Signature::from_scalars(
                eth_tx.signature.r().to_fixed_bytes(),
                eth_tx.signature.s().to_fixed_bytes(),
            )
            .with_context(|| "signature from_scalars")?;
            let sig_recid = k256::ecdsa::RecoveryId::from_byte(eth_tx.signature.standard_v())
                .ok_or(anyhow!("bad recovery id"))?;
            let message = ethereum::LegacyTransactionMessage::from(eth_tx);

            (
                message.chain_id,
                sig,
                sig_recid,
                message.hash(),
                message.action,
                message.value,
                message.input,
                message.nonce,
                message.gas_price,
                message.gas_limit,
            )
        }
        ethereum::TransactionV2::EIP2930(eth_tx) => {
            let sig = k256::ecdsa::Signature::from_scalars(
                eth_tx.r.to_fixed_bytes(),
                eth_tx.s.to_fixed_bytes(),
            )
            .with_context(|| "signature from_scalars")?;
            let sig_recid = k256::ecdsa::RecoveryId::new(eth_tx.odd_y_parity, false);
            let message = ethereum::EIP2930TransactionMessage::from(eth_tx);

            (
                Some(message.chain_id),
                sig,
                sig_recid,
                message.hash(),
                message.action,
                message.value,
                message.input,
                message.nonce,
                message.gas_price,
                message.gas_limit,
            )
        }
        ethereum::TransactionV2::EIP1559(eth_tx) => {
            let sig = k256::ecdsa::Signature::from_scalars(
                eth_tx.r.to_fixed_bytes(),
                eth_tx.s.to_fixed_bytes(),
            )
            .with_context(|| "signature from_scalars")?;
            let sig_recid = k256::ecdsa::RecoveryId::new(eth_tx.odd_y_parity, false);
            let message = ethereum::EIP1559TransactionMessage::from(eth_tx);

            // Base fee is zero. Allocate only priority fee.
            let resolved_gas_price =
                std::cmp::min(message.max_fee_per_gas, message.max_priority_fee_per_gas);
            (
                Some(message.chain_id),
                sig,
                sig_recid,
                message.hash(),
                message.action,
                message.value,
                message.input,
                message.nonce,
                resolved_gas_price,
                message.gas_limit,
            )
        }
    };
    if chain_id != expected_chain_id {
        return Err(anyhow!(
            "chain ID {:?}, expected {:?}",
            chain_id,
            expected_chain_id
        ));
    }
    let (method, body) = match eth_action {
        ethereum::TransactionAction::Call(eth_address) => (
            "evm.Call",
            cbor::to_value(types::Call {
                address: eth_address.into(),
                value: eth_value.into(),
                data: eth_input,
            }),
        ),
        ethereum::TransactionAction::Create => (
            "evm.Create",
            cbor::to_value(types::Create {
                value: eth_value.into(),
                init_code: eth_input,
            }),
        ),
    };
    let key = recover_low(&sig, sig_recid, &sig_hash)?;
    let nonce: u64 = eth_nonce
        .try_into()
        .map_err(|e| anyhow!("converting nonce: {}", e))?;
    let gas_price: u128 = eth_gas_price
        .try_into()
        .map_err(|e| anyhow!("converting gas price: {}", e))?;
    let gas_limit: u64 = eth_gas_limit
        .try_into()
        .map_err(|e| anyhow!("converting gas limit: {}", e))?;
    let resolved_fee_amount = gas_price
        .checked_mul(gas_limit as u128)
        .ok_or_else(|| anyhow!("computing total fee amount"))?;

    Ok(transaction::Transaction {
        version: transaction::LATEST_TRANSACTION_VERSION,
        call: transaction::Call {
            format: transaction::CallFormat::Plain,
            method: method.to_owned(),
            body,
            ..Default::default()
        },
        auth_info: transaction::AuthInfo {
            signer_info: vec![transaction::SignerInfo {
                address_spec: transaction::AddressSpec::Signature(
                    address::SignatureAddressSpec::Secp256k1Eth(
                        signature::secp256k1::PublicKey::from_bytes(
                            k256::EncodedPoint::from(&key).as_bytes(),
                        )
                        .with_context(|| "sdk secp256k1 public key from bytes")?,
                    ),
                ),
                nonce,
            }],
            fee: transaction::Fee {
                amount: token::BaseUnits(resolved_fee_amount, token::Denomination::NATIVE),
                gas: gas_limit,
                consensus_messages: 0, // Dynamic number of consensus messages, limited by gas.
            },
            ..Default::default()
        },
    })
}

#[cfg(test)]
mod test {
    use std::str::FromStr as _;

    use hex::FromHex as _;

    use oasis_runtime_sdk::types::token;

    use crate::{derive_caller, types};

    use super::decode;

    #[allow(clippy::too_many_arguments)]
    fn decode_expect_call(
        raw: &str,
        expected_chain_id: Option<u64>,
        expected_to: &str,
        expected_value: u128,
        expected_data: &str,
        expected_gas_limit: u64,
        expected_gas_price: u128,
        expected_from: &str,
        expected_nonce: u64,
    ) {
        let tx = decode(&Vec::from_hex(raw).unwrap(), expected_chain_id).unwrap();
        println!("{:?}", &tx);
        assert_eq!(tx.call.method, "evm.Call");
        let body: types::Call = cbor::from_value(tx.call.body).unwrap();
        assert_eq!(body.address, types::H160::from_str(expected_to).unwrap());
        assert_eq!(body.value, types::U256::from(expected_value));
        assert_eq!(body.data, Vec::from_hex(expected_data).unwrap());
        assert_eq!(tx.auth_info.signer_info.len(), 1);
        assert_eq!(
            derive_caller::from_tx_auth_info(&tx.auth_info).unwrap(),
            types::H160::from_str(expected_from).unwrap(),
        );
        assert_eq!(tx.auth_info.signer_info[0].nonce, expected_nonce);
        assert_eq!(
            tx.auth_info.fee.amount.0,
            expected_gas_limit as u128 * expected_gas_price,
        );
        assert_eq!(tx.auth_info.fee.amount.1, token::Denomination::NATIVE);
        assert_eq!(tx.auth_info.fee.gas, expected_gas_limit);
    }

    #[allow(clippy::too_many_arguments)]
    fn decode_expect_create(
        raw: &str,
        expected_chain_id: Option<u64>,
        expected_value: u128,
        expected_init_code: &str,
        expected_gas_limit: u64,
        expected_gas_price: u128,
        expected_from: &str,
        expected_nonce: u64,
    ) {
        let tx = decode(&Vec::from_hex(raw).unwrap(), expected_chain_id).unwrap();
        println!("{:?}", &tx);
        assert_eq!(tx.call.method, "evm.Create");
        let body: types::Create = cbor::from_value(tx.call.body).unwrap();
        assert_eq!(body.value, types::U256::from(expected_value));
        assert_eq!(body.init_code, Vec::from_hex(expected_init_code).unwrap());
        assert_eq!(tx.auth_info.signer_info.len(), 1);
        assert_eq!(
            derive_caller::from_tx_auth_info(&tx.auth_info).unwrap(),
            types::H160::from_str(expected_from).unwrap(),
        );
        assert_eq!(tx.auth_info.signer_info[0].nonce, expected_nonce);
        assert_eq!(
            tx.auth_info.fee.amount.0,
            expected_gas_limit as u128 * expected_gas_price,
        );
        assert_eq!(tx.auth_info.fee.amount.1, token::Denomination::NATIVE);
        assert_eq!(tx.auth_info.fee.gas, expected_gas_limit);
    }

    fn decode_expect_invalid(raw: &str, expected_chain_id: Option<u64>) {
        let e = decode(&Vec::from_hex(raw).unwrap(), expected_chain_id).unwrap_err();
        eprintln!("Decoding error (expected): {:?}", e);
    }

    fn decode_expect_from_mismatch(
        raw: &str,
        expected_chain_id: Option<u64>,
        unexpected_from: &str,
    ) {
        match decode(&Vec::from_hex(raw).unwrap(), expected_chain_id) {
            Ok(tx) => {
                assert_ne!(
                    derive_caller::from_tx_auth_info(&tx.auth_info).unwrap(),
                    types::H160::from_str(unexpected_from).unwrap(),
                );
            }
            Err(e) => {
                // Returning Err is fine too.
                eprintln!("Decoding error (expected): {:?}", e);
            }
        }
    }

    #[test]
    fn test_decode_basic() {
        // https://github.com/ethereum/tests/blob/v10.0/BasicTests/txtest.json
        decode_expect_call(
            "f86b8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc10000801ba0eab47c1a49bf2fe5d40e01d313900e19ca485867d462fe06e139e3a536c6d4f4a014a569d327dcda4b29f74f93c0e9729d2f49ad726e703f9cd90dbb0fbf6649f1",
            None,
            "13978aee95f38490e9769c39b2773ed763d9cd5f",
            10_000_000_000_000_000,
            "",
            10_000,
            1_000_000_000_000,
            // "cow" test account
            "cd2a3d9f938e13cd947ec05abc7fe734df8dd826",
            0,
        );
        decode_expect_create(
            // We're using a transaction normalized from the original (below) to have low `s`.
            // f87f8085e8d4a510008227108080af6025515b525b600a37f260003556601b596020356000355760015b525b54602052f260255860005b525b54602052f21ba05afed0244d0da90b67cf8979b0f246432a5112c0d31e8d5eedd2bc17b171c694a0bb1035c834677c2e1185b8dc90ca6d1fa585ab3d7ef23707e1a497a98e752d1b
            "f87f8085e8d4a510008227108080af6025515b525b600a37f260003556601b596020356000355760015b525b54602052f260255860005b525b54602052f21ca05afed0244d0da90b67cf8979b0f246432a5112c0d31e8d5eedd2bc17b171c694a044efca37cb9883d1ee7a47236f3592df152931a930566933de2dc6e341c11426",
            None,
            0,
            "6025515b525b600a37f260003556601b596020356000355760015b525b54602052f260255860005b525b54602052f2",
            10_000,
            1_000_000_000_000,
            // "horse" test account
            "13978aee95f38490e9769c39b2773ed763d9cd5f",
            0,
        );
    }

    #[test]
    fn test_decode_eip1559_multicall() {
        // https://github.com/mds1/multicall
        // The pre-signed Multicall contract deploy tx is on on many chains
        decode_expect_create(
            "f90f538085174876e800830f42408080b90f00608060405234801561001057600080fd5b50610ee0806100206000396000f3fe6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e1461025a578063bce38bd714610275578063c3077fa914610288578063ee82ac5e1461029b57600080fd5b80634d2301cc146101ec57806372425d9d1461022157806382ad56cb1461023457806386d516e81461024757600080fd5b80633408e470116100c65780633408e47014610191578063399542e9146101a45780633e64a696146101c657806342cbb15c146101d957600080fd5b80630f28c97d146100f8578063174dea711461011a578063252dba421461013a57806327e86d6e1461015b575b600080fd5b34801561010457600080fd5b50425b6040519081526020015b60405180910390f35b61012d610128366004610a85565b6102ba565b6040516101119190610bbe565b61014d610148366004610a85565b6104ef565b604051610111929190610bd8565b34801561016757600080fd5b50437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0140610107565b34801561019d57600080fd5b5046610107565b6101b76101b2366004610c60565b610690565b60405161011193929190610cba565b3480156101d257600080fd5b5048610107565b3480156101e557600080fd5b5043610107565b3480156101f857600080fd5b50610107610207366004610ce2565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561022d57600080fd5b5044610107565b61012d610242366004610a85565b6106ab565b34801561025357600080fd5b5045610107565b34801561026657600080fd5b50604051418152602001610111565b61012d610283366004610c60565b61085a565b6101b7610296366004610a85565b610a1a565b3480156102a757600080fd5b506101076102b6366004610d18565b4090565b60606000828067ffffffffffffffff8111156102d8576102d8610d31565b60405190808252806020026020018201604052801561031e57816020015b6040805180820190915260008152606060208201528152602001906001900390816102f65790505b5092503660005b8281101561047757600085828151811061034157610341610d60565b6020026020010151905087878381811061035d5761035d610d60565b905060200281019061036f9190610d8f565b6040810135958601959093506103886020850185610ce2565b73ffffffffffffffffffffffffffffffffffffffff16816103ac6060870187610dcd565b6040516103ba929190610e32565b60006040518083038185875af1925050503d80600081146103f7576040519150601f19603f3d011682016040523d82523d6000602084013e6103fc565b606091505b50602080850191909152901515808452908501351761046d577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610325565b508234146104e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d6174636800000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff81111561050c5761050c610d31565b60405190808252806020026020018201604052801561053f57816020015b606081526020019060019003908161052a5790505b5091503660005b8281101561068657600087878381811061056257610562610d60565b90506020028101906105749190610e42565b92506105836020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166105a66020850185610dcd565b6040516105b4929190610e32565b6000604051808303816000865af19150503d80600081146105f1576040519150601f19603f3d011682016040523d82523d6000602084013e6105f6565b606091505b5086848151811061060957610609610d60565b602090810291909101015290508061067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b50600101610546565b5050509250929050565b43804060606106a086868661085a565b905093509350939050565b6060818067ffffffffffffffff8111156106c7576106c7610d31565b60405190808252806020026020018201604052801561070d57816020015b6040805180820190915260008152606060208201528152602001906001900390816106e55790505b5091503660005b828110156104e657600084828151811061073057610730610d60565b6020026020010151905086868381811061074c5761074c610d60565b905060200281019061075e9190610e76565b925061076d6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166107906040850185610dcd565b60405161079e929190610e32565b6000604051808303816000865af19150503d80600081146107db576040519150601f19603f3d011682016040523d82523d6000602084013e6107e0565b606091505b506020808401919091529015158083529084013517610851577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b50600101610714565b6060818067ffffffffffffffff81111561087657610876610d31565b6040519080825280602002602001820160405280156108bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816108945790505b5091503660005b82811015610a105760008482815181106108df576108df610d60565b602002602001015190508686838181106108fb576108fb610d60565b905060200281019061090d9190610e42565b925061091c6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff1661093f6020850185610dcd565b60405161094d929190610e32565b6000604051808303816000865af19150503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b506020830152151581528715610a07578051610a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b506001016108c3565b5050509392505050565b6000806060610a2b60018686610690565b919790965090945092505050565b60008083601f840112610a4b57600080fd5b50813567ffffffffffffffff811115610a6357600080fd5b6020830191508360208260051b8501011115610a7e57600080fd5b9250929050565b60008060208385031215610a9857600080fd5b823567ffffffffffffffff811115610aaf57600080fd5b610abb85828601610a39565b90969095509350505050565b6000815180845260005b81811015610aed57602081850181015186830182015201610ad1565b81811115610aff576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610bb1578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001895281518051151584528401516040858501819052610b9d81860183610ac7565b9a86019a9450505090830190600101610b4f565b5090979650505050505050565b602081526000610bd16020830184610b32565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610c52577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610c40868351610ac7565b95509284019290840190600101610c06565b509398975050505050505050565b600080600060408486031215610c7557600080fd5b83358015158114610c8557600080fd5b9250602084013567ffffffffffffffff811115610ca157600080fd5b610cad86828701610a39565b9497909650939450505050565b838152826020820152606060408201526000610cd96060830184610b32565b95945050505050565b600060208284031215610cf457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610bd157600080fd5b600060208284031215610d2a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610dc357600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e0257600080fd5b83018035915067ffffffffffffffff821115610e1d57600080fd5b602001915036819003821315610a7e57600080fd5b8183823760009101908152919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610dc357600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112610dc357600080fdfea2646970667358221220bb2b5c71a328032f97c676ae39a1ec2148d3e5d6f73d95e9b17910152d61f16264736f6c634300080c00331ca0edce47092c0f398cebf3ffc267f05c8e7076e3b89445e0fe50f6332273d4569ba01b0b9d000e19b24c5869b0fc3b22b0d6fa47cd63316875cbbd577d76e6fde086",
            None,                                       // chain_id
            0,                                          // value
            "608060405234801561001057600080fd5b50610ee0806100206000396000f3fe6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e1461025a578063bce38bd714610275578063c3077fa914610288578063ee82ac5e1461029b57600080fd5b80634d2301cc146101ec57806372425d9d1461022157806382ad56cb1461023457806386d516e81461024757600080fd5b80633408e470116100c65780633408e47014610191578063399542e9146101a45780633e64a696146101c657806342cbb15c146101d957600080fd5b80630f28c97d146100f8578063174dea711461011a578063252dba421461013a57806327e86d6e1461015b575b600080fd5b34801561010457600080fd5b50425b6040519081526020015b60405180910390f35b61012d610128366004610a85565b6102ba565b6040516101119190610bbe565b61014d610148366004610a85565b6104ef565b604051610111929190610bd8565b34801561016757600080fd5b50437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0140610107565b34801561019d57600080fd5b5046610107565b6101b76101b2366004610c60565b610690565b60405161011193929190610cba565b3480156101d257600080fd5b5048610107565b3480156101e557600080fd5b5043610107565b3480156101f857600080fd5b50610107610207366004610ce2565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561022d57600080fd5b5044610107565b61012d610242366004610a85565b6106ab565b34801561025357600080fd5b5045610107565b34801561026657600080fd5b50604051418152602001610111565b61012d610283366004610c60565b61085a565b6101b7610296366004610a85565b610a1a565b3480156102a757600080fd5b506101076102b6366004610d18565b4090565b60606000828067ffffffffffffffff8111156102d8576102d8610d31565b60405190808252806020026020018201604052801561031e57816020015b6040805180820190915260008152606060208201528152602001906001900390816102f65790505b5092503660005b8281101561047757600085828151811061034157610341610d60565b6020026020010151905087878381811061035d5761035d610d60565b905060200281019061036f9190610d8f565b6040810135958601959093506103886020850185610ce2565b73ffffffffffffffffffffffffffffffffffffffff16816103ac6060870187610dcd565b6040516103ba929190610e32565b60006040518083038185875af1925050503d80600081146103f7576040519150601f19603f3d011682016040523d82523d6000602084013e6103fc565b606091505b50602080850191909152901515808452908501351761046d577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610325565b508234146104e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d6174636800000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff81111561050c5761050c610d31565b60405190808252806020026020018201604052801561053f57816020015b606081526020019060019003908161052a5790505b5091503660005b8281101561068657600087878381811061056257610562610d60565b90506020028101906105749190610e42565b92506105836020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166105a66020850185610dcd565b6040516105b4929190610e32565b6000604051808303816000865af19150503d80600081146105f1576040519150601f19603f3d011682016040523d82523d6000602084013e6105f6565b606091505b5086848151811061060957610609610d60565b602090810291909101015290508061067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b50600101610546565b5050509250929050565b43804060606106a086868661085a565b905093509350939050565b6060818067ffffffffffffffff8111156106c7576106c7610d31565b60405190808252806020026020018201604052801561070d57816020015b6040805180820190915260008152606060208201528152602001906001900390816106e55790505b5091503660005b828110156104e657600084828151811061073057610730610d60565b6020026020010151905086868381811061074c5761074c610d60565b905060200281019061075e9190610e76565b925061076d6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166107906040850185610dcd565b60405161079e929190610e32565b6000604051808303816000865af19150503d80600081146107db576040519150601f19603f3d011682016040523d82523d6000602084013e6107e0565b606091505b506020808401919091529015158083529084013517610851577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b50600101610714565b6060818067ffffffffffffffff81111561087657610876610d31565b6040519080825280602002602001820160405280156108bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816108945790505b5091503660005b82811015610a105760008482815181106108df576108df610d60565b602002602001015190508686838181106108fb576108fb610d60565b905060200281019061090d9190610e42565b925061091c6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff1661093f6020850185610dcd565b60405161094d929190610e32565b6000604051808303816000865af19150503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b506020830152151581528715610a07578051610a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b506001016108c3565b5050509392505050565b6000806060610a2b60018686610690565b919790965090945092505050565b60008083601f840112610a4b57600080fd5b50813567ffffffffffffffff811115610a6357600080fd5b6020830191508360208260051b8501011115610a7e57600080fd5b9250929050565b60008060208385031215610a9857600080fd5b823567ffffffffffffffff811115610aaf57600080fd5b610abb85828601610a39565b90969095509350505050565b6000815180845260005b81811015610aed57602081850181015186830182015201610ad1565b81811115610aff576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610bb1578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001895281518051151584528401516040858501819052610b9d81860183610ac7565b9a86019a9450505090830190600101610b4f565b5090979650505050505050565b602081526000610bd16020830184610b32565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610c52577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610c40868351610ac7565b95509284019290840190600101610c06565b509398975050505050505050565b600080600060408486031215610c7557600080fd5b83358015158114610c8557600080fd5b9250602084013567ffffffffffffffff811115610ca157600080fd5b610cad86828701610a39565b9497909650939450505050565b838152826020820152606060408201526000610cd96060830184610b32565b95945050505050565b600060208284031215610cf457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610bd157600080fd5b600060208284031215610d2a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610dc357600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e0257600080fd5b83018035915067ffffffffffffffff821115610e1d57600080fd5b602001915036819003821315610a7e57600080fd5b8183823760009101908152919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610dc357600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112610dc357600080fdfea2646970667358221220bb2b5c71a328032f97c676ae39a1ec2148d3e5d6f73d95e9b17910152d61f16264736f6c634300080c0033",                  // init_code
            1_000_000,                                  // gas limit
            100_000_000_000,                            // 100 Gwei
            "05f32b3cc3888453ff71b01135b34ff8e41263f2", // from
            0,                                          // nonce
        );
    }

    #[test]
    fn test_decode_chain_id() {
        // Test with mismatching expect_chain_id to exercise our check.
        decode_expect_invalid(
            // Taken from test_decode_basic.
            "f86b8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc10000801ba0eab47c1a49bf2fe5d40e01d313900e19ca485867d462fe06e139e3a536c6d4f4a014a569d327dcda4b29f74f93c0e9729d2f49ad726e703f9cd90dbb0fbf6649f1",
            Some(5),
        );
    }

    #[test]
    fn test_decode_types() {
        // https://github.com/ethereum/tests/blob/v10.0/BlockchainTests/ValidBlocks/bcEIP1559/transType.json
        decode_expect_call(
            "f861018203e882c35094cccccccccccccccccccccccccccccccccccccccc80801ca021539ef96c70ab75350c594afb494458e211c8c722a7a0ffb7025c03b87ad584a01d5395fe48edb306f614f0cd682b8c2537537f5fd3e3275243c42e9deff8e93d",
            None,
            "cccccccccccccccccccccccccccccccccccccccc",
            0,
            "",
            50_000,
            1_000,
            "d02d72e067e77158444ef2020ff2d325f929b363",
            1,
        );
        decode_expect_call(
            "01f86301028203e882c35094cccccccccccccccccccccccccccccccccccccccc8080c080a0260f95e555a1282ef49912ff849b2007f023c44529dc8fb7ecca7693cccb64caa06252cf8af2a49f4cb76fd7172feaece05124edec02db242886b36963a30c2606",
            Some(1),
            "cccccccccccccccccccccccccccccccccccccccc",
            0,
            "",
            50_000,
            1_000,
            "d02d72e067e77158444ef2020ff2d325f929b363",
            2,
        );
        decode_expect_call(
            "02f8640103648203e882c35094cccccccccccccccccccccccccccccccccccccccc8080c001a08480e6848952a15ae06192b8051d213d689bdccdf8f14cf69f61725e44e5e80aa057c2af627175a2ac812dab661146dfc7b9886e885c257ad9c9175c3fcec2202e",
            Some(1),
            "cccccccccccccccccccccccccccccccccccccccc",
            0,
            "",
            50_000,
            100,
            "d02d72e067e77158444ef2020ff2d325f929b363",
            3,
        );
    }

    #[test]
    fn test_decode_verify() {
        // Altered signature, out of bounds r = n.
        decode_expect_invalid("f86b8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc10000801ba0fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141a014a569d327dcda4b29f74f93c0e9729d2f49ad726e703f9cd90dbb0fbf6649f1", None);
        // Altered signature, high s.
        decode_expect_invalid("f86b8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc10000801ca0eab47c1a49bf2fe5d40e01d313900e19ca485867d462fe06e139e3a536c6d4f4a0eb5a962cd82325b4d608b06c3f168d618b652f7440d8609ee6c4a37d10cff750", None);
        // Altered signature, s decreased by one.
        decode_expect_from_mismatch(
            "f86b8085e8d4a510008227109413978aee95f38490e9769c39b2773ed763d9cd5f872386f26fc10000801ba0eab47c1a49bf2fe5d40e01d313900e19ca485867d462fe06e139e3a536c6d4f4a014a569d327dcda4b29f74f93c0e9729d2f49ad726e703f9cd90dbb0fbf6649f0",
            None,
            "cd2a3d9f938e13cd947ec05abc7fe734df8dd826",
        );
    }
}
